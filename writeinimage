#!/usr/bin/env python3

from pathlib import Path

import click
import colorama
from PIL import Image, ImageFont, ImageDraw

from video_commands_lib import normalize_color, normalize_size, list_fonts, path_to_font

default_width = 1920
default_height = 1080
default_size = f"{default_width}x{default_height}"

@click.group()
def cli():
    pass

@cli.command()
@click.option('--width', type=int, default=0, help='Canvas width')
@click.option('--height', type=int, default=0, help='Canvas height')
@click.option('--x', type=int, default=0, help='Horizontal position of the beginning of writing')
@click.option('--y', type=int, default=0, help='Vertical position of the beginning of writing')
@click.option('--size', default="", help='Canvas height')
@click.option('--bgcolor', default='white', help='Color of the background (name or hexadecimal code)')
@click.option('--color', default='black', help='Color of the text (name or hexadecimal code)')
@click.option('--text', default='Lorem Ipsum', help='Text to write.')
@click.option('--font', help='Typography with which to write the text.')
@click.option('--font_size', type=int, default=20, help='Size of letters')
@click.option('--text_size', type=int, default=default_width * 80 // 100, help='size of the sign to write on the image, in case --font-size is not indicated')
@click.option('--gravity', default='C', help='sign position: N, NE, E, SE, S, SW, W, NW or C (North, North-East, East, South, South-West, West, North-West o Center)')
@click.option('--margin', type=int, default=0, help='margin with respect to the gravity point')
@click.option('--config', help='Path to config file')
@click.option('--effect', help='Effect on letters')
@click.option('--input', help='Path to input file')
@click.option('--output', default='sign.png', help='Path to output file')
def new(width, height, x, y, size, bgcolor, color, text, font, font_size, text_size, gravity, margin, config, effect, input, output):
    """ Create a new image file with the indicated text. """
    bgcolor = normalize_color(bgcolor)
    color = normalize_color(color)
    width, height = normalize_size(width, height, size, default_width, default_height)
    print(width, height, x, y, size, bgcolor, color, text, font, font_size, text_size, gravity, margin, config, effect, input, output)

    print(font)
    if font:
        font_path = path_to_font(font)
        print(font_path)
    #     font_var = ImageFont.truetype(font_path, font_size)
    # else:
    #     font_var = ImageFont.load_default()
    #
    # img = Image.new('RGB', (width, height), color=bgcolor)
    #
    # draw = ImageDraw.Draw(img)
    # # Define the coordinates of the text based on the starting point and gravity
    # # N, NE, E, SE, S, SW, W, NW or C
    # text_width, text_height = draw.textsize(text, font=font)
    # if gravity.lower() == 'c' or gravity.lower() == 'center':
    #     text_x = (width - text_width) // 2
    #     text_y = (height - text_height) // 2
    # elif gravity.lower() == 'n' or gravity.lower() == 'north':
    #     text_x = (width - text_width) // 2
    #     text_y = margin
    # elif gravity.lower() == 's' or gravity.lower() == 'south':
    #     text_x = margin
    #     text_y = (height - text_height) // 2
    #
    # img.save(output)
    # output_path = Path(output)
    # if output_path.is_file():
    #     click.echo(f"The image has been created{ colorama.Fore.GREEN } successfully{ colorama.Style.RESET_ALL }: {output}")
    # else:
    #     click.echo(f"An{ colorama.Fore.RED } error{ colorama.Style.RESET_ALL } occurred creating the file {output}.")

@cli.command()
def simple():
    """ """
    pass

@cli.command()
def wordbyword():
    """ """
    pass

@cli.command()
def animated():
    """ """
    pass

@cli.command()
def typewriter():
    """ """
    pass

@cli.command()
@click.argument('element')
def list(element):
    """Lists the elements available to work with the command."""
    if element.lower() == "fonts":
        list_fonts()

if __name__ == '__main__':
    cli()

#!/usr/bin/env python3

import click
import colorama
import math

from PIL import Image, ImageDraw, ImageFilter

import video_commands_lib as vlc

default_width = 1920
default_height = 1080

default_line_width = default_width // 200

@click.group()
def cli():
    pass

@cli.command()
@click.option('--width', type=int, default=default_width, help='Canvas width')
@click.option('--height', type=int, default=1080, help='Canvas height')
@click.option('--color', default='white', help='Background color (name or hexadecimal code)')
@click.option('--output_path', default='canvas.png', help='Path to output file')
def solid(width, height, color, output_path):
    """Create a canvas with solid color."""
    normalized_color = vlc.normalize_color(color)
    img = Image.new('RGB', (width, height), color=normalized_color)
    img.save(output_path)
    click.echo(f"The image has been created{ colorama.Fore.GREEN } successfully{ colorama.Style.RESET_ALL }: {output_path}")

@cli.command()
@click.option('--width', type=int, default=default_width, help='Canvas width')
@click.option('--height', type=int, default=default_height, help='Canvas height')
@click.option('--color', default='white', help='Background color (name or hexadecimal code)')
@click.option('--line_color', default='black', help='Lines color (name or hexadecimal code)')
@click.option('--line_width', type=int, default=default_line_width, help='Lines width')
@click.option('--line_separation', type=int, default=default_line_width, help='Lines separation')
@click.option('--gaussian', type=int, default=0, help='Gaussian blur')
@click.option('--output_path', default='canvas_with_vertical_lines.png', help='Path to output file')
def verticallines(width, height, color, line_color, line_width, line_separation, gaussian, output_path):
    """Create a canvas with vertical lines."""
    normalized_color = vlc.normalize_color(color)
    img = Image.new('RGB', (width, height), color=normalized_color)
    draw = ImageDraw.Draw(img)
    for x in range(0, img.width, line_separation):
        draw.line((x, 0, x, img.height), fill=line_color, width=line_width)
    if gaussian:
        img = img.filter(ImageFilter.GaussianBlur(radius = gaussian))
    img.save(output_path)
    click.echo(f"The image has been created{ colorama.Fore.GREEN } successfully{ colorama.Style.RESET_ALL }: {output_path}")

@cli.command()
@click.option('--width', type=int, default=default_width, help='Canvas width')
@click.option('--height', type=int, default=default_height, help='Canvas height')
@click.option('--color', default='white', help='Background color (name or hexadecimal code)')
@click.option('--line_color', default='black', help='Lines color (name or hexadecimal code)')
@click.option('--line_width', type=int, default=default_line_width, help='Lines width')
@click.option('--line_separation', type=int, default=default_line_width, help='Lines separation')
@click.option('--gaussian', type=int, default=0, help='Gaussian blur')
@click.option('--output_path', default='canvas_with_horizontal_lines.png', help='Path to output file')
def horizontallines(width, height, color, line_color, line_width, line_separation, gaussian, output_path):
    """Create a canvas with vertical lines."""
    normalized_color = vlc.normalize_color(color)
    img = Image.new('RGB', (width, height), color=normalized_color)
    draw = ImageDraw.Draw(img)
    for x in range(0, img.height, line_separation):
        draw.line((0, x, img.width, x), fill=line_color, width=line_width)
    if gaussian:
        img = img.filter(ImageFilter.GaussianBlur(radius = gaussian))

    img.save(output_path)
    click.echo(f"The image has been created{ colorama.Fore.GREEN } successfully{ colorama.Style.RESET_ALL }: {output_path}")

@cli.command()
@click.option('--width', type=int, default=default_width, help='Canvas width')
@click.option('--height', type=int, default=default_height, help='Canvas height')
@click.option('--color1', default='white', help='Color of the first square (name or hexadecimal code)')
@click.option('--color2', default='black', help='Color of the second square (name or hexadecimal code)')
@click.option('--square_size', type=int, default=20, help='Size of each square')
@click.option('--gaussian', type=int, default=0, help='Gaussian blur')
@click.option('--output_path', default='chessboard.png', help='Path to output file')
def chessboard(width, height, color1, color2, square_size, gaussian, output_path):
    """Create a canvas with a chessboard pattern."""
    img = Image.new('RGB', (width, height), color=color1)
    draw = ImageDraw.Draw(img)

    for y in range(0, height, square_size):
        for x in range(0, width, square_size):
            if (x // square_size + y // square_size) % 2 == 0:
                square_color = color1
            else:
                square_color = color2

            draw.rectangle([x, y, x + square_size, y + square_size], fill=square_color)

    if gaussian:
        img = img.filter(ImageFilter.GaussianBlur(radius=gaussian))

    img.save(output_path)
    click.echo(f"The image has been created{ colorama.Fore.GREEN } successfully{ colorama.Style.RESET_ALL }: {output_path}")

@cli.command()
@click.option('--width', type=int, default=default_width, help='Canvas width')
@click.option('--height', type=int, default=default_height, help='Canvas height')
@click.option('--color1', default='white', help='Color of the first square (name or hexadecimal code)')
@click.option('--color2', default='black', help='Color of the second square (name or hexadecimal code)')
@click.option('--line_size', type=int, default=20, help='Size of each line')
@click.option('--gaussian', type=int, default=0, help='Gaussian blur')
@click.option('--output_path', default='diagonal_cross_canvas.png', help='Path to output file')
def x(width, height, color1, color2, line_size, gaussian, output_path):
    """Create a canvas with a diagonal cross pattern."""
    img = Image.new('RGB', (width, height), color=color1)
    draw = ImageDraw.Draw(img)

    draw.line([0, 0, width, height], fill=color2, width=line_size)
    draw.line([0, height, width, 0], fill=color2, width=line_size)

    if gaussian:
        img = img.filter(ImageFilter.GaussianBlur(radius=gaussian))

    img.save(output_path)
    click.echo(f"The image has been created{ colorama.Fore.GREEN } successfully{ colorama.Style.RESET_ALL }: {output_path}")

@cli.command()
@click.option('--width', type=int, default=default_width, help='Canvas width')
@click.option('--height', type=int, default=default_height, help='Canvas height')
@click.option('--color1', default='white', help='Color of the first square (name or hexadecimal code)')
@click.option('--color2', default='black', help='Color of the second square (name or hexadecimal code)')
@click.option('--line_size', type=int, default=20, help='Size of each square')
@click.option('--gaussian', type=int, default=0, help='Gaussian blur')
@click.option('--output_path', default='cross_canvas.png', help='Path to output file')
def cross(width, height, color1, color2, line_size, gaussian, output_path):
    """Create a canvas with a cross pattern."""
    img = Image.new('RGB', (width, height), color=color1)
    draw = ImageDraw.Draw(img)

    x = (width - line_size) // 2
    y = (height - line_size) // 2

    draw.line([width // 2, 0, width // 2, height], fill=color2, width=line_size)
    draw.line([0, height // 2, width, height // 2], fill=color2, width=line_size)

    if gaussian:
        img = img.filter(ImageFilter.GaussianBlur(radius=gaussian))

    img.save(output_path)
    click.echo(f"The image has been created{ colorama.Fore.GREEN } successfully{ colorama.Style.RESET_ALL }: {output_path}")

@cli.command()
@click.option('--width', type=int, default=default_width, help='Canvas width')
@click.option('--height', type=int, default=default_height, help='Canvas height')
@click.option('--color', default='white', help='Color of the background (name or hexadecimal code)')
@click.option('--color_frame', default='black', help='Color of the frame (name or hexadecimal code)')
@click.option('--line_size', type=int, default=20, help='Size of frame line')
@click.option('--gaussian', type=int, default=0, help='Gaussian blur')
@click.option('--output_path', default='frame_canvas.png', help='Path to output file')
def withframe(width, height, color, color_frame, line_size, gaussian, output_path):
    """Create a canvas with a frame."""
    img = Image.new('RGB', (width, height), color=color)
    draw = ImageDraw.Draw(img)

    draw.rectangle([0, 0, width, height], outline=color_frame, width=line_size)

    if gaussian:
        img = img.filter(ImageFilter.GaussianBlur(radius=gaussian))

    img.save(output_path)
    click.echo(f"The image has been created{ colorama.Fore.GREEN } successfully{ colorama.Style.RESET_ALL }: {output_path}")

@cli.command()
@click.option('--width', type=int, default=default_width, help='Canvas width')
@click.option('--height', type=int, default=default_height, help='Canvas height')
@click.option('--color', default='white', help='Color of the background (name or hexadecimal code)')
@click.option('--color_frame', default='black', help='Color of the frame (name or hexadecimal code)')
@click.option('--color_frame_2', default='blue', help='Color of the second frame (name or hexadecimal code)')
@click.option('--line_size', type=int, default=20, help='Size of frame line')
@click.option('--line_size_2', type=int, default=10, help='Size of second frame line')
@click.option('--gaussian', type=int, default=0, help='Gaussian blur')
@click.option('--output_path', default='double_frame_canvas.png', help='Path to output file')
def doubleframe(width, height, color, color_frame, color_frame_2, line_size, line_size_2, gaussian, output_path):
    """Create a canvas with double frame."""
    img = Image.new('RGB', (width, height), color=color)
    draw = ImageDraw.Draw(img)

    draw.rectangle([0, 0, width, height], outline=color_frame, width=line_size)
    draw.rectangle([line_size, line_size, width - line_size, height - line_size], outline=color_frame_2, width=line_size_2)

    if gaussian:
        img = img.filter(ImageFilter.GaussianBlur(radius=gaussian))

    img.save(output_path)
    click.echo(f"The image has been created{ colorama.Fore.GREEN } successfully{ colorama.Style.RESET_ALL }: {output_path}")

@cli.command()
@click.option('--width', type=int, default=default_width, help='Canvas width')
@click.option('--height', type=int, default=default_height, help='Canvas height')
@click.option('--color', default='white', help='Color of the background (name or hexadecimal code)')
@click.option('--color_frame', default='black', help='Color of the frame (name or hexadecimal code)')
@click.option('--color_frame_2', default='blue', help='Color of the second frame (name or hexadecimal code)')
@click.option('--color_frame_3', default='red', help='Color of the third frame (name or hexadecimal code)')
@click.option('--line_size', type=int, default=20, help='Size of frame line')
@click.option('--line_size_2', type=int, default=10, help='Size of second frame line')
@click.option('--line_size_3', type=int, default=20, help='Size of third frame line')
@click.option('--gaussian', type=int, default=0, help='Gaussian blur')
@click.option('--output_path', default='double_frame_canvas.png', help='Path to output file')
def tripleframe(width, height, color, color_frame, color_frame_2, color_frame_3, line_size, line_size_2, line_size_3, gaussian, output_path):
    """Create a canvas with double frame."""
    img = Image.new('RGB', (width, height), color=color)
    draw = ImageDraw.Draw(img)

    draw.rectangle([0, 0, width, height], outline=color_frame, width=line_size)
    draw.rectangle([line_size, line_size, width - line_size, height - line_size], outline=color_frame_2, width=line_size_2)
    draw.rectangle([line_size + line_size_2, line_size + line_size_2, width - (line_size + line_size_2), height - (line_size + line_size_2)], outline=color_frame_3, width=line_size_3)

    if gaussian:
        img = img.filter(ImageFilter.GaussianBlur(radius=gaussian))

    img.save(output_path)
    click.echo(f"The image has been created{ colorama.Fore.GREEN } successfully{ colorama.Style.RESET_ALL }: {output_path}")


@cli.command()
@click.option('--width', type=int, default=default_width, help='Canvas width')
@click.option('--height', type=int, default=default_height, help='Canvas height')
@click.option('--color', default='white', help='Background color (name or hexadecimal code)')
@click.option('--line_color', default='black', help='Lines color (name or hexadecimal code)')
@click.option('--line_width', type=int, default=default_line_width, help='Lines width')
@click.option('--line_separation', type=int, default=default_line_width, help='Lines separation')
@click.option('--gaussian', type=int, default=0, help='Gaussian blur')
@click.option('--angle', type=int, default=45, help='Angle of the lines')
@click.option('--output_path', default='canvas_with_diagonal_lines_up.png', help='Path to output file')
def wayofheaven(width, height, color, line_color, line_width, line_separation, gaussian, angle, output_path):
    """Create a canvas with diagonal of heaven lines."""
    normalized_color = vlc.normalize_color(color)
    img = Image.new('RGB', (width, height), color=normalized_color)
    draw = ImageDraw.Draw(img)

    m = math.tan(math.radians(angle))

    # Calcular el punto base x
    x_base = 0

    for y in range(0, img.height, line_separation):
        x1 = round(x_base)
        x2 = round(x_base + m * (y + line_separation))
        y2 = y + line_separation

        print(f"Line: ({x1}, {y}) to ({x2}, {y2})")
        draw.line((x1, y, x2, y2), fill=line_color, width=line_width)

        x_base += line_separation

    if gaussian:
        img = img.filter(ImageFilter.GaussianBlur(radius=gaussian))

    img.save(output_path)
    click.echo(f"The image has been created{ colorama.Fore.GREEN } successfully{ colorama.Style.RESET_ALL }: {output_path}")


@cli.command()
@click.option('--width', type=int, default=default_width, help='Canvas width')
@click.option('--height', type=int, default=default_height, help='Canvas height')
@click.option('--color', default='white', help='Background color (name or hexadecimal code)')
@click.option('--line_color', default='black', help='Lines color (name or hexadecimal code)')
@click.option('--line_width', type=int, default=2, help='Lines width')
@click.option('--line_separation', type=int, default=20, help='Lines separation')
@click.option('--gaussian', type=int, default=0, help='Gaussian blur')
@click.option('--angle', type=int, default=45, help='Angle of the lines')
@click.option('--output_path', default='canvas_with_diagonal_lines_up.png', help='Path to output file')
def diagonal(width, height, color, line_color, line_width, line_separation, gaussian, angle, output_path):
    """Create a canvas with diagonal lines."""
    normalized_color = vlc.normalize_color(color)
    img = Image.new('RGB', (width * 3, height * 3), color=normalized_color)
    draw = ImageDraw.Draw(img)
    for x in range(0, img.height, line_separation):
        draw.line((0, x, img.width, x), fill=line_color, width=line_width)
    if gaussian:
        img = img.filter(ImageFilter.GaussianBlur(radius = gaussian))
    img = img.rotate(angle, expand=True)

    x1 = (img.width - width) // 2
    y1 = (img.height - height) // 2
    x2 = x1 + width
    y2 = y1 + height

    img = img.crop((x1, y1, x2, y2))

    img.save(output_path)
    click.echo(f"The image has been created{ colorama.Fore.GREEN } successfully{ colorama.Style.RESET_ALL }: {output_path}")

if __name__ == '__main__':
    cli()
